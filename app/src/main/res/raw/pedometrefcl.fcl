FUNCTION_BLOCK pedometre
VAR_INPUT				// Define input variables
	axes_x : REAL;
	axes_y : REAL;
	axes_z : REAL;
END_VAR
VAR_OUTPUT				// Define output variable
	movement : REAL;
END_VAR
FUZZIFY axes_x
	TERM low := (0, 0) (0, 1) (0.3, 1) (2, 0) ;
	TERM meduim := (1, 0) (5, 1) (20, 1) (30, 0);
	TERM fast := (15, 0) (25, 1) (30, 1) (40, 0);
END_FUZZIFY

FUZZIFY axes_y			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 0) (0, 1) (0.3, 1) (2, 0) ;
    	TERM meduim := (1, 0) (5, 1) (20, 1) (30, 0);
    	TERM fast := (15, 0) (25, 1) (30, 1) (40, 0);
END_FUZZIFY

FUZZIFY axes_z			// Fuzzify input variable 'service': {'poor', 'good' , 'excellent'}
	TERM low := (0, 0) (0, 1) (0.3, 1) (2, 0) ;
    	TERM meduim := (1, 0) (5, 1) (20, 1) (30, 0);
    	TERM fast := (15, 0) (25, 1) (30, 1) (40, 0);
END_FUZZIFY

DEFUZZIFY movement			// Defzzzify output variable 'tip' : {'cheap', 'average', 'generous' }
	TERM stop := (-0.4, 0) (0, 1) (0.4, 0);
	TERM marche := (0.1, 0) (0.5, 1) (6, 0);
	TERM courir := (4, 0) (20, 1) (40, 0);
	METHOD : COG;		// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;		// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;			// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;			// Use 'min' activation method
	ACCU : MAX;			// Use 'max' accumulation method





	//000
	RULE 1 : IF (axes_x is low) and ((axes_y is low) and (axes_z is low)) then (movement is stop) ;
	//001
	RULE 2 : if (axes_x is low) and ((axes_y is low) and (axes_z is meduim)) then (movement is stop) ;
	//002
	RULE 3 : if (axes_x is low) and ((axes_y is low) and (axes_z is fast)) then (movement is stop) ;
	//010
	RULE 4 : if (axes_x is low) and ((axes_y is meduim) and (axes_z is low)) then (movement is stop) ;
	//011
	RULE 5 : If (axes_x is low) and ((axes_y is meduim) and (axes_z is meduim)) then (movement is marche);
	//012
	RULE 6 :  If (axes_x is low) and ((axes_y is meduim) and (axes_z is fast)) then (movement is courir);
	//020
	RULE 7 : if (axes_x is low) and ((axes_y is fast) and (axes_z is low)) then (movement is stop) ;
	//021
	RULE 8 : If (axes_x is low) and ((axes_y is fast) and (axes_z is meduim)) then (movement is courir);
	//022
	RULE 9 : If (axes_x is low) and ((axes_y is fast) and (axes_z is fast)) then (movement is courir);

	//100
    RULE 10 : IF (axes_x is meduim) and ((axes_y is low) and (axes_z is low)) then (movement is stop) ;
    //101
    	RULE 11 : if (axes_x is meduim) and ((axes_y is low) and (axes_z is meduim)) then (movement is marche) ;
    //102
    	RULE 12 : if (axes_x is meduim) and ((axes_y is low) and (axes_z is fast)) then (movement is courir) ;
    //110
    	RULE 13 : if (axes_x is meduim) and ((axes_y is meduim) and (axes_z is low)) then (movement is marche) ;
    //111
    	RULE 14 : If (axes_x is meduim) and ((axes_y is meduim) and (axes_z is meduim)) then (movement is marche);
    //112
    	RULE 15 :  If (axes_x is meduim) and ((axes_y is meduim) and (axes_z is fast)) then (movement is courir);
    //120
    	RULE 16 : if (axes_x is meduim) and ((axes_y is fast) and (axes_z is low)) then (movement is courir) ;
    //121
    	RULE 17 : If (axes_x is meduim) and ((axes_y is fast) and (axes_z is meduim)) then (movement is courir);
    //122
    	RULE 18 : If (axes_x is meduim) and ((axes_y is fast) and (axes_z is fast)) then (movement is courir);
    //200
        	RULE 19 : IF (axes_x is fast) and ((axes_y is low) and (axes_z is low)) then (movement is stop) ;
    //201
        	RULE 20 : if (axes_x is fast) and ((axes_y is low) and (axes_z is meduim)) then (movement is courir) ;
    //202
        	RULE 21 : if (axes_x is fast) and ((axes_y is low) and (axes_z is fast)) then (movement is courir) ;
    //210
        	RULE 22 : if (axes_x is fast) and ((axes_y is meduim) and (axes_z is low)) then (movement is courir) ;
    //211
        	RULE 23 : If (axes_x is fast) and ((axes_y is meduim) and (axes_z is meduim)) then (movement is courir);
    //212
        	RULE 24 :  If (axes_x is fast) and ((axes_y is meduim) and (axes_z is fast)) then (movement is courir);
    //220
        	RULE 25 : if (axes_x is fast) and ((axes_y is fast) and (axes_z is low)) then (movement is courir) ;
    //221
        	RULE 26 : If (axes_x is fast) and ((axes_y is fast) and (axes_z is meduim)) then (movement is courir);
    //222
        	RULE 27 : If (axes_x is fast) and ((axes_y is fast) and (axes_z is fast)) then (movement is courir);








END_RULEBLOCK
END_FUNCTION_BLOCK